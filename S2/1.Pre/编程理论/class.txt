We have some elementary programs, and we have program construct we can use to build more complex programs from existing programs:

elementary programs:
- assignment, for example: x,y:=x+1,2x+y
- SKIP
- ABORT

program constructs
- seqenece: (S1;S2)
- selection
- loop
--------------
we introduce 3 new program constructs

[S]: atomic statement

await B then S ta		!= if B then S else SKIP fi
S3

parallel block
parbegin S1 || S2 || ... || Sn parend
----------
A=(x:Z)

x:=1;
parbegin S1 || S2 parend

S1:
if x>0
then
  {x>0} this is not a good annotation in case of parallel programs
  x:=x+1
fi

s2: x:= -1

Some possible executions of the parallel block:
5 -> <5,1,-1,fail>
5 -> <5,1,2,-1>
5 -> <5,1,-1,0>
-----
[if x>0 then x:= x+1 fi] is executed in atomic way

-------------------------------------------
A=(a:Z,b:Z)

 a b
(5,2) -> <(5,2),(0,2),(0,0),(1,0),(2,0),(2,0),(2,0),(2,1),(4,1),...
(5,2) -> <(5,2),(0,2),(0,0),(1,0),(2,0),(2,0),(2,0),(2,1),(5,1),...

(5,2) -> <(5,2),(0,2),(0,0),(0,0),(1,0),(1,0),(1,0),(1,0),...>
deadlock

-----------------------------------------
There are deadlock situations
1. D(S1) and D(S2)
2. D(S1) and post(S2)
3. post(S1) and D(S2)

D(S2) = FALSE, because there is no await in S2
So the only possible deadlock situation:
D(S1) and post(S2) 

post(S2) = (x=1)
D(S1) = ((x=0 or x=1) and x!=1)

(D(S1) and post(S2)) = FALSE
-----------------------------
i,j:=0,1;
-> await i=1 then j:=i*4 ta;
parbegin S1||S2 parend



there are deadlock situations
1. D(S1) and D(S2)
2. D(S1) and post(S2)
3. post(S1) and D(S2)

(D(S1) and D(S2)) or (D(S1) and post(S2)) or (post(S1) and D(S2))

D(S1)= (Inv and i<=n) and i!=j
D(S2)= (Inv and j<=n) and i<=j
post(S1)= (Inv and i=n+1)
post(S2)= (Inv and j=n+1)

1. (D(S1) and D(S2)) = ((Inv and i<=n) and i!=j and (Inv and j<=n) and i<=j)

Inv: j<=i
i<=j			i!=j
--------
i=j
----------
FALSE

2. (D(S1) and post(S2)) = ((Inv and i<=n) and i!=j and Inv and j=n+1)

Inv: j<=i
i!=j		j=n+1
-------
j<i      -----> n+1<i
Inv: i<=n+1
---------
FALSE

-------------------------------------
Hoare triple

{{Q}}S{{R}}		Q =>wp(S,R)
They mean the same.